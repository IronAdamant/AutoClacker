<Window x:Class="AutoClacker.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:AutoClacker.ViewModels"
        Title="AutoClacker" Height="600" Width="975" WindowStyle="None" ResizeMode="CanResize">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Themes/LightTheme.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <!-- Custom Title Bar -->
        <Border Grid.Row="0" Style="{StaticResource TitleBar}" MouseLeftButtonDown="TitleBar_MouseLeftButtonDown">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Text="AutoClacker" VerticalAlignment="Center" Margin="10,0,0,0"/>
                <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button Content="_" Width="30" Height="30" Click="MinimizeButton_Click" Margin="0,0,5,0"/>
                    <Button Content="□" Width="30" Height="30" Click="MaximizeRestoreButton_Click" Margin="0,0,5,0"/>
                    <Button Content="X" Width="30" Height="30" Click="CloseButton_Click"/>
                </StackPanel>
            </Grid>
        </Border>
        <!-- Main Content -->
        <Grid Grid.Row="1" Grid.RowSpan="5">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Click Scope -->
            <GroupBox Grid.Row="0" Grid.Column="0" Header="Click Scope">
                <StackPanel>
                    <RadioButton Content="Global" IsChecked="{Binding ClickScope, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Global}" Command="{Binding Path=ClickScope, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Global}"/>
                    <RadioButton Content="Restricted to Application (Keyboard)" IsChecked="{Binding ClickScope, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Restricted}" Command="{Binding Path=ClickScope, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Restricted}"/>
                    <StackPanel Orientation="Horizontal" IsEnabled="{Binding IsRestrictedMode}">
                        <ComboBox ItemsSource="{Binding RunningApplications}" SelectedItem="{Binding TargetApplication}"/>
                        <Button Content="Refresh" Command="{Binding RefreshApplicationsCommand}"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>

            <!-- Action Type -->
            <GroupBox Grid.Row="0" Grid.Column="1" Header="Action Type">
                <StackPanel Orientation="Horizontal">
                    <RadioButton Content="Mouse" IsChecked="{Binding ActionType, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Mouse}" Command="{Binding Path=ActionType, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Mouse}"/>
                    <RadioButton Content="Keyboard" IsChecked="{Binding ActionType, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Keyboard}" Command="{Binding Path=ActionType, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Keyboard}"/>
                </StackPanel>
            </GroupBox>

            <!-- Mouse Settings -->
            <GroupBox Grid.Row="1" Grid.Column="0" Header="Mouse Settings" Visibility="{Binding IsMouseMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Mouse Button:"/>
                        <ComboBox ItemsSource="{Binding MouseButtonOptions}" SelectedItem="{Binding MouseButton}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Click Type:"/>
                        <ComboBox ItemsSource="{Binding ClickTypeOptions}" SelectedItem="{Binding ClickType}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <RadioButton Content="Click" IsChecked="{Binding MouseMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Click}" Command="{Binding Path=MouseMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Click}"/>
                        <RadioButton Content="Hold" IsChecked="{Binding MouseMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Hold}" Command="{Binding Path=MouseMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Hold}"/>
                    </StackPanel>
                    <!-- Click Options -->
                    <StackPanel Visibility="{Binding IsClickModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="Constant Clicks" IsChecked="{Binding ClickMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Constant}" Command="{Binding Path=ClickMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Constant}"/>
                            <RadioButton Content="Click Duration" IsChecked="{Binding ClickMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Duration}" Command="{Binding Path=ClickMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Duration}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsClickDurationMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Click Duration:"/>
                            <TextBox Text="{Binding ClickDurationMinutes, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="m"/>
                            <TextBox Text="{Binding ClickDurationSeconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="s"/>
                            <TextBox Text="{Binding ClickDurationMilliseconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsClickDurationMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Remaining Click Duration:"/>
                            <Label Content="{Binding RemainingDurationMin}"/>
                            <Label Content="m"/>
                            <Label Content="{Binding RemainingDurationSec}"/>
                            <Label Content="s"/>
                            <Label Content="{Binding RemainingDurationMs}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                    </StackPanel>
                    <!-- Mouse Hold Options -->
                    <StackPanel Visibility="{Binding IsHoldModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="Constant Hold" IsChecked="{Binding HoldMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=ConstantHold}" Command="{Binding Path=HoldMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=ConstantHold}"/>
                            <RadioButton Content="Hold Duration" IsChecked="{Binding HoldMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=HoldDuration}" Command="{Binding Path=HoldMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=HoldDuration}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsHoldModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Hold Duration:"/>
                            <TextBox Text="{Binding MouseHoldDurationMinutes, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="m"/>
                            <TextBox Text="{Binding MouseHoldDurationSeconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="s"/>
                            <TextBox Text="{Binding MouseHoldDurationMilliseconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsHoldModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Remaining Mouse Hold Duration:"/>
                            <Label Content="{Binding RemainingDurationMin}"/>
                            <Label Content="m"/>
                            <Label Content="{Binding RemainingDurationSec}"/>
                            <Label Content="s"/>
                            <Label Content="{Binding RemainingDurationMs}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                        <!-- Mouse Physical Hold Mode Toggle -->
                        <CheckBox Content="Physical Hold Mode" IsChecked="{Binding MousePhysicalHoldMode, UpdateSourceTrigger=PropertyChanged}" Margin="5,2" Visibility="{Binding IsHoldModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <!-- Explanation for Mouse Physical Hold Mode -->
                        <TextBlock Text="Physical Hold Mode: Repeats down events to mimic a physical hold, better for some games." Margin="5,2" FontSize="10" Visibility="{Binding IsHoldModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>

            <!-- Keyboard Settings -->
            <GroupBox Grid.Row="1" Grid.Column="1" Header="Keyboard Settings" Visibility="{Binding IsKeyboardMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Button Content="Set Key" Command="{Binding SetKeyCommand}"/>
                        <Label Content="{Binding KeyboardKeyDisplay}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <RadioButton Content="Press" IsChecked="{Binding KeyboardMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Press}" Command="{Binding Path=KeyboardMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Press}"/>
                        <RadioButton Content="Hold" IsChecked="{Binding KeyboardMode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Hold}" Command="{Binding Path=KeyboardMode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Hold}"/>
                    </StackPanel>
                    <!-- Press Options -->
                    <StackPanel Visibility="{Binding IsPressModeVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="Constant" IsChecked="{Binding Mode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Constant}" Command="{Binding Path=Mode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Constant}"/>
                            <RadioButton Content="Press Timer" IsChecked="{Binding Mode, Converter={StaticResource StringToBooleanConverter}, ConverterParameter=Timer}" Command="{Binding Path=Mode, Converter={StaticResource StringToCommandConverter}, ConverterParameter=Timer}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsTimerMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Total Duration:"/>
                            <TextBox Text="{Binding TotalDurationMinutes, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="m"/>
                            <TextBox Text="{Binding TotalDurationSeconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="s"/>
                            <TextBox Text="{Binding TotalDurationMilliseconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsTimerMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Remaining Press Timer:"/>
                            <Label Content="{Binding RemainingDurationMin}"/>
                            <Label Content="m"/>
                            <Label Content="{Binding RemainingDurationSec}"/>
                            <Label Content="s"/>
                            <Label Content="{Binding RemainingDurationMs}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                    </StackPanel>
                    <!-- Keyboard Hold Options -->
                    <StackPanel Visibility="{Binding IsHoldModeVisibleKeyboard, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton Content="Constant" IsChecked="{Binding IsKeyboardHoldDurationMode, Mode=OneWay, Converter={StaticResource InverseBooleanConverter}}" Command="{Binding SetConstantCommand}"/>
                            <RadioButton Content="Hold Duration" IsChecked="{Binding IsKeyboardHoldDurationMode, Mode=OneWay}" Command="{Binding SetHoldDurationCommand}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsKeyboardHoldDurationMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Hold Duration:"/>
                            <TextBox Text="{Binding KeyboardHoldDurationMinutes, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="m"/>
                            <TextBox Text="{Binding KeyboardHoldDurationSeconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="s"/>
                            <TextBox Text="{Binding KeyboardHoldDurationMilliseconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Visibility="{Binding IsKeyboardHoldDurationMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="Remaining Keyboard Hold Duration:"/>
                            <Label Content="{Binding RemainingDurationMin}"/>
                            <Label Content="m"/>
                            <Label Content="{Binding RemainingDurationSec}"/>
                            <Label Content="s"/>
                            <Label Content="{Binding RemainingDurationMs}"/>
                            <Label Content="ms"/>
                        </StackPanel>
                        <!-- Keyboard Physical Hold Mode Toggle -->
                        <CheckBox Content="Physical Hold Mode" IsChecked="{Binding KeyboardPhysicalHoldMode, UpdateSourceTrigger=PropertyChanged}" Margin="5,2" Visibility="{Binding IsHoldModeVisibleKeyboard, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <!-- Explanation for Keyboard Physical Hold Mode -->
                        <TextBlock Text="Physical Hold Mode: Repeats down events to mimic a physical hold, better for some games." Margin="5,2" FontSize="10" Visibility="{Binding IsHoldModeVisibleKeyboard, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>

            <!-- Toggle Key -->
            <GroupBox Grid.Row="2" Grid.Column="0" Header="Toggle Key (Start/Stop)">
                <StackPanel Orientation="Horizontal">
                    <Button Content="Set Toggle Key" Command="{Binding SetTriggerKeyCommand}"/>
                    <Label Content="{Binding TriggerKeyDisplay}"/>
                </StackPanel>
            </GroupBox>

            <!-- Speed -->
            <GroupBox Grid.Row="2" Grid.Column="1" Header="Speed">
                <StackPanel>
                    <Label Content="Interval:" HorizontalAlignment="Left"/>
                    <StackPanel Orientation="Horizontal">
                        <TextBox Text="{Binding IntervalMinutes, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                        <Label Content="m"/>
                        <TextBox Text="{Binding IntervalSeconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                        <Label Content="s"/>
                        <TextBox Text="{Binding IntervalMilliseconds, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"/>
                        <Label Content="ms"/>
                    </StackPanel>
                </StackPanel>
            </GroupBox>

            <!-- Status and Buttons -->
            <StackPanel Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Center">
                <Label Content="{Binding StatusText}" Foreground="{Binding StatusColor}" BorderThickness="1" Padding="10,5"/>
                <Button Content="Reset to Default" Command="{Binding ResetSettingsCommand}"/>
                <Button Content="Options" Command="{Binding OpenOptionsCommand}"/>
                <CheckBox Content="Always on Top" IsChecked="{Binding IsTopmost, UpdateSourceTrigger=PropertyChanged}" Margin="5,2"/>
            </StackPanel>

            <!-- Footer Label -->
            <Label Grid.Row="4" Grid.Column="1" Content="Creation of IronAdamant, 2025" HorizontalAlignment="Right" VerticalAlignment="Bottom" FontSize="10" Foreground="Gray"/>
        </Grid>
    </Grid>
</Window>
